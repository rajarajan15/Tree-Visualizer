{"ast":null,"code":"import BinarySearchTree from '../BST/js_binary_search_tree.js';\nconst BALANCE_FACTORS = {\n  LEFT_HEAVY: -1,\n  BALANCED: 0,\n  RIGHT_HEAVY: 1\n};\nclass AVLTree extends BinarySearchTree {\n  getNodeHeight(node) {\n    if (node === null) {\n      return -1;\n    }\n    return Math.max(this.getNodeHeight(node.left), this.getNodeHeight(node.right)) + 1;\n  }\n  getBalanceFactor(node) {\n    if (node === null) {\n      return 0;\n    }\n    return this.getNodeHeight(node.right) - this.getNodeHeight(node.left);\n  }\n  rotateRight(node) {\n    // left of left\n    const left = node.left;\n    node.left = left.right;\n    left.right = node;\n    left.parent = node.parent;\n    node.parent = left;\n    if (left.parent) {\n      if (left.parent.left === node) {\n        left.parent.left = left;\n      } else {\n        left.parent.right = left;\n      }\n    }\n    return left;\n  }\n  rotateLeft(node) {\n    //right of right\n    const right = node.right;\n    node.right = right.left;\n    right.left = node;\n    right.parent = node.parent;\n    node.parent = right;\n    if (right.parent) {\n      if (right.parent.left === node) {\n        right.parent.left = right;\n      } else {\n        right.parent.right = right;\n      }\n    }\n    return right;\n  }\n  rotateLeftRight(node) {\n    // right of left\n    node.left = this.rotateLeft(node.left);\n    return this.rotateRight(node);\n  }\n  rotateRightLeft(node) {\n    // left of right\n    node.right = this.rotateRight(node.right);\n    return this.rotateLeft(node);\n  }\n  rebalance(node) {\n    if (!node) {\n      return;\n    }\n    const balanceFactor = this.getBalanceFactor(node);\n    if (balanceFactor < BALANCE_FACTORS.LEFT_HEAVY) {\n      if (this.getBalanceFactor(node.left) === BALANCE_FACTORS.LEFT_HEAVY) {\n        node = this.rotateRight(node);\n      } else {\n        node = this.rotateLeftRight(node);\n      }\n    } else if (balanceFactor > BALANCE_FACTORS.RIGHT_HEAVY) {\n      if (this.getBalanceFactor(node.right) === BALANCE_FACTORS.RIGHT_HEAVY) {\n        node = this.rotateLeft(node);\n      } else {\n        node = this.rotateRightLeft(node);\n      }\n    }\n    if (node && node.parent) {\n      this.rebalance(node.parent);\n    } else if (node) {\n      this.root = node;\n    }\n  }\n  remove(value) {\n    const removedNode = super.remove(value);\n    if (removedNode === this.root) {\n      this.root = removedNode ? removedNode.parent : null;\n    }\n    if (removedNode) {\n      this.rebalance(removedNode.parent);\n    }\n    return removedNode;\n  }\n  insert(value) {\n    const node = super.insert(value);\n    this.rebalance(node);\n    return node;\n  }\n}\nexport default AVLTree;","map":{"version":3,"names":["BinarySearchTree","BALANCE_FACTORS","LEFT_HEAVY","BALANCED","RIGHT_HEAVY","AVLTree","getNodeHeight","node","Math","max","left","right","getBalanceFactor","rotateRight","parent","rotateLeft","rotateLeftRight","rotateRightLeft","rebalance","balanceFactor","root","remove","value","removedNode","insert"],"sources":["/Users/alagarsaravanan/treeviz/Tree-viz/src/AVL/js_avl_tree.js"],"sourcesContent":["import BinarySearchTree from '../BST/js_binary_search_tree.js'\r\nconst BALANCE_FACTORS = {\r\n  LEFT_HEAVY: -1,\r\n  BALANCED: 0,\r\n  RIGHT_HEAVY: 1,\r\n};\r\nclass AVLTree extends BinarySearchTree {\r\n  getNodeHeight(node) {\r\n    if (node === null) {\r\n      return -1;\r\n    }\r\n    return (\r\n      Math.max(this.getNodeHeight(node.left), this.getNodeHeight(node.right)) +\r\n      1\r\n    );\r\n  }\r\n\r\n  getBalanceFactor(node) {\r\n    if (node === null) {\r\n      return 0;\r\n    }\r\n    return this.getNodeHeight(node.right) - this.getNodeHeight(node.left);\r\n  }\r\n\r\n  rotateRight(node) { // left of left\r\n    const left = node.left;\r\n    node.left = left.right;\r\n    left.right = node;\r\n\r\n    left.parent = node.parent;\r\n    node.parent = left;\r\n    if (left.parent) {\r\n      if (left.parent.left === node) {\r\n        left.parent.left = left;\r\n      } else {\r\n        left.parent.right = left;\r\n      }\r\n    }\r\n    return left;\r\n  }\r\n\r\n  rotateLeft(node) { //right of right\r\n    const right = node.right;\r\n    node.right = right.left;\r\n    right.left = node;\r\n\r\n    right.parent = node.parent;\r\n    node.parent = right;\r\n    if (right.parent) {\r\n      if (right.parent.left === node) {\r\n        right.parent.left = right;\r\n      } else {\r\n        right.parent.right = right;\r\n      }\r\n    }\r\n    return right;\r\n  }\r\n\r\n  rotateLeftRight(node) { // right of left\r\n    node.left = this.rotateLeft(node.left);\r\n    return this.rotateRight(node);\r\n  }\r\n\r\n  rotateRightLeft(node) { // left of right\r\n    node.right = this.rotateRight(node.right);\r\n    return this.rotateLeft(node);\r\n  }\r\n\r\n  rebalance(node) {\r\n\r\n    if (!node) {\r\n        return;\r\n    }\r\n\r\n    const balanceFactor = this.getBalanceFactor(node);\r\n\r\n    if (balanceFactor < BALANCE_FACTORS.LEFT_HEAVY) {\r\n        if (this.getBalanceFactor(node.left) === BALANCE_FACTORS.LEFT_HEAVY) {\r\n            node = this.rotateRight(node);\r\n        } else {\r\n            node = this.rotateLeftRight(node);\r\n        }\r\n    } else if (balanceFactor > BALANCE_FACTORS.RIGHT_HEAVY) {\r\n        if (this.getBalanceFactor(node.right) === BALANCE_FACTORS.RIGHT_HEAVY) {\r\n            node = this.rotateLeft(node);\r\n        } else {\r\n            node = this.rotateRightLeft(node);\r\n        }\r\n    }\r\n\r\n    if (node && node.parent) {\r\n        this.rebalance(node.parent);\r\n    } else if (node) {\r\n        this.root = node;\r\n    }\r\n}\r\n\r\n\r\n  remove(value) {\r\n    const removedNode = super.remove(value);\r\n\r\n    if (removedNode === this.root) {\r\n        this.root = removedNode ? removedNode.parent : null;\r\n    }\r\n\r\n    if (removedNode) {\r\n        this.rebalance(removedNode.parent);\r\n    }\r\n\r\n    return removedNode;\r\n}\r\n\r\n\r\n\r\n  insert(value) {\r\n    const node = super.insert(value);\r\n    this.rebalance(node);\r\n    return node;\r\n  }\r\n}\r\nexport default AVLTree;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}